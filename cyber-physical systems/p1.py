# -*- coding: utf-8 -*-
"""p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sjymF4Ig48fxRyZArOdRRTxLiei5J57_
"""

import pandas as pd
import matplotlib
import matplotlib.pyplot as plt

read_file = pd.read_csv (r'/content/blacksholes_log2.txt')
read_file.to_csv (r'blacksholes_log.csv', index=None)

read_file = pd.read_csv (r'/content/bodytrack_log2.txt')
read_file.to_csv (r'bodytrack_log.csv', index=None)

read_file = pd.read_csv (r'/content/tpBench_log2.txt')
read_file.to_csv (r'tpBench_log.csv', index=None)

tpBench_data = pd.read_csv("/content/tpBench_log.csv")
bodytrack_data = pd.read_csv ('/content/bodytrack_log.csv')
blacksholes_data = pd.read_csv ('/content/blacksholes_log.csv')

file1 = open("tpBench_log2.txt","w")
with open('/content/final_log.txt') as f:
    contents = f.readlines()
    for i in range(len(contents)):
      contents[i] = ','.join(contents[i].split('\t')).replace(" ", ",")
      contents[i] = contents[i][:-2] + "\n"

      
file1.writelines(contents)
file1.close()

file1 = open("bodytrack_log2.txt","w")
with open('/content/bodytrack_log.txt') as f:
    contents = f.readlines()
    for i in range(len(contents)):
      contents[i] = ','.join(contents[i].split('\t')).replace(" ", ",")
      contents[i] = contents[i][:-2] + "\n"

      
file1.writelines(contents)
file1.close()

file1 = open("blacksholes_log2.txt","w")
with open('/content/blacksholes_log.txt') as f:
    contents = f.readlines()
    for i in range(len(contents)):
      contents[i] = ','.join(contents[i].split('\t')).replace(" ", ",")
      contents[i] = contents[i][:-2] + "\n"

      
file1.writelines(contents)
file1.close()

start = tpBench_data['time'][0]
end = tpBench_data['W'][575]
tpBench_data.drop(tpBench_data.tail(1).index,inplace=True) # drop last n rows
print(start, end)
print(end - start)
tpBench_data['time'] = tpBench_data['time'].apply(lambda x: x - start)

tpBench_data['time'] = tpBench_data['time'].apply(lambda x: x - start)

tpBench_data

plt.title('Total Power Cosumption for TPBench')
plt.plot(tpBench_data['time'], tpBench_data['W'], label = 'Power Consumption')
plt.xlabel("Time (s)")
plt.ylabel("Power Consumption (W)")
plt.legend()
plt.savefig('TPBench_powerCons')
plt.show()

plt.title('Core Utilization for TPBench')
plt.plot(tpBench_data['time'], tpBench_data['usage_c4'], label = 'Core 4')
plt.plot(tpBench_data['time'], tpBench_data['usage_c5'], label = 'Core 5')
plt.plot(tpBench_data['time'], tpBench_data['usage_c6'], label = 'Core 6')
plt.plot(tpBench_data['time'], tpBench_data['usage_c7'], label = 'Core 7')
plt.xlabel("Time (s)")
plt.ylabel("Core Utilization %")
plt.legend()
plt.savefig('TPBench_CoreUtil.png')
plt.show()

plt.title('Core Temperatures for TPBench')
plt.plot(tpBench_data['time'], tpBench_data['temp4'], label = 'temp 4')
plt.plot(tpBench_data['time'], tpBench_data['temp5'], label = 'temp 5')
plt.plot(tpBench_data['time'], tpBench_data['temp6'], label = 'temp 6')
plt.plot(tpBench_data['time'], tpBench_data['temp'], label = 'temp 7')
plt.xlabel("Time (s)")
plt.ylabel("Temp (C)")
plt.legend()
plt.savefig('TPBench_temps.png')
plt.show()

start = blacksholes_data['time'][0]
end = blacksholes_data['W'][660]
blacksholes_data.drop(blacksholes_data.tail(1).index,inplace=True) # drop last n rows
print(start, end)
print(end - start)
blacksholes_data['time'] = blacksholes_data['time'].apply(lambda x: x - start)

print(sum(blacksholes_data['W'])/660)

total = 0
for index, row in blacksholes_data.iterrows():
  total += max(row['temp4'],row['temp5'],row['temp6'],row['temp'])
print(total/660)

max(max(blacksholes_data['temp4']),max(blacksholes_data['temp5']),max(blacksholes_data['temp6']),max(blacksholes_data['temp']))

print(sum(blacksholes_data['W'])*(blacksholes_data['time'][1]-blacksholes_data['time'][0]))

start = bodytrack_data['time'][0]
end = bodytrack_data['W'][580]
bodytrack_data.drop(bodytrack_data.tail(1).index,inplace=True) # drop last n rows
print(start, end)
print(end - start)
bodytrack_data['time'] = bodytrack_data['time'].apply(lambda x: x - start)

print(sum(bodytrack_data['W'])/580)

total = 0
for index, row in bodytrack_data.iterrows():
  total += max(row['temp4'],row['temp5'],row['temp6'],row['temp'])
print(total/580)

max(max(bodytrack_data['temp4']),max(bodytrack_data['temp5']),max(bodytrack_data['temp6']),max(bodytrack_data['temp']))

print(sum(bodytrack_data['W'])*(bodytrack_data['time'][1]-bodytrack_data['time'][0]))

plt.title('Total Power Cosumption')
plt.plot(bodytrack_data['time'], bodytrack_data['W'], label = 'bodytrack')
plt.plot(blacksholes_data['time'], blacksholes_data['W'], label = 'blacksholes')
plt.xlabel("Time (s)")
plt.ylabel("Power Consumption (W)")
plt.legend()
plt.savefig('bodyVblack_powerCons.png')
plt.show()

arr_black = []
for index, row in blacksholes_data.iterrows():
  arr_black.append(max(row['temp4'],row['temp5'],row['temp6'],row['temp']))
arr_body = []
for index, row in bodytrack_data.iterrows():
  arr_body.append(max(row['temp4'],row['temp5'],row['temp6'],row['temp']))

plt.title('Max Core temp (C)')
plt.plot(bodytrack_data['time'], arr_body, label = 'bodytrack')
plt.plot(blacksholes_data['time'], arr_black, label = 'blacksholes')
plt.xlabel("Time (s)")
plt.ylabel("Max Temp (C)")
plt.legend()
plt.savefig('MaxCoreTemp.png')
plt.show()

